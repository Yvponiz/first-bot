service: first-bot
provider:
  name: aws
  lambdaHashingVersion: 20200924
  runtime: nodejs14.x
  region: ca-central-1
  stage: ${env:NODE_ENV}
  tracing:
    apiGateway: true
    lambda: true
  environment:
    NODE_ENV: ${env:NODE_ENV}
    TABLE_NAME:
      Ref: Table
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - secretsmanager:GetSecretValue
        - s3:PutObject
        - s3:GetObject
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - '*'

package:
  exclude:
    - node_modules/**
    - src/**
    - test/**

custom:
  serverless-layers:
    - packageManager: yarn
    - dependenciesPath: ./package.json
  dynamodb:
    stages:
      - local
    start:
      port: 4080
      region: ca-central-1
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
  ngrokTunnel:
    envPath: './.env.local' # optional. Path to your .env file, relative to serverless.yml file
    tunnels:
      - port: 4000
        envProp: 'API_GATEWAY'

functions:
  first:
    handler: dist/functions/first.handler
    events:
      - http:
          path: /firsts
          method: ANY
          cors: true
      - http:
          path: /firsts/{proxy+}
          method: ANY
          cors: true
  twitch-event:
    handler: dist/functions/twitch-event.handler
    events:
      - http:
          path: /twitch/event/
          method: ANY
          cors: true

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Table${env:NODE_ENV}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

plugins:
  - serverless-layers
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-ngrok-tunnel